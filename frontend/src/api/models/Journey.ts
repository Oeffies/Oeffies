/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Swagger
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JourneyLegsInner } from './JourneyLegsInner';
import {
    JourneyLegsInnerFromJSON,
    JourneyLegsInnerFromJSONTyped,
    JourneyLegsInnerToJSON,
} from './JourneyLegsInner';
import type { JourneyStats } from './JourneyStats';
import {
    JourneyStatsFromJSON,
    JourneyStatsFromJSONTyped,
    JourneyStatsToJSON,
} from './JourneyStats';

/**
 * 
 * @export
 * @interface Journey
 */
export interface Journey {
    /**
     * Number of interchanges contained in given journey (corresponds to number of legs minus one).
     * @type {number}
     * @memberof Journey
     */
    interchanges: number;
    /**
     * Partial trips/journeys which are forming the journey as a whole.
     * @type {Array<JourneyLegsInner>}
     * @memberof Journey
     */
    legs: Array<JourneyLegsInner>;
    /**
     * 
     * @type {JourneyStats}
     * @memberof Journey
     */
    journeyStats: JourneyStats;
}

/**
 * Check if a given object implements the Journey interface.
 */
export function instanceOfJourney(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "interchanges" in value;
    isInstance = isInstance && "legs" in value;
    isInstance = isInstance && "journeyStats" in value;

    return isInstance;
}

export function JourneyFromJSON(json: any): Journey {
    return JourneyFromJSONTyped(json, false);
}

export function JourneyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Journey {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interchanges': json['interchanges'],
        'legs': ((json['legs'] as Array<any>).map(JourneyLegsInnerFromJSON)),
        'journeyStats': JourneyStatsFromJSON(json['journeyStats']),
    };
}

export function JourneyToJSON(value?: Journey | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interchanges': value.interchanges,
        'legs': ((value.legs as Array<any>).map(JourneyLegsInnerToJSON)),
        'journeyStats': JourneyStatsToJSON(value.journeyStats),
    };
}

