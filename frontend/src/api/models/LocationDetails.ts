/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Swagger
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * 
 * @export
 * @interface LocationDetails
 */
export interface LocationDetails {
    /**
     * Short name of the location.
     * @type {string}
     * @memberof LocationDetails
     */
    shortName: string;
    /**
     * Quality how well the given location meets the related query (biggest number is the best result).
     * @type {number}
     * @memberof LocationDetails
     */
    matchQuality: number;
    /**
     * 
     * @type {Location}
     * @memberof LocationDetails
     */
    parent: Location;
    /**
     * Latitude of a location.
     * @type {number}
     * @memberof LocationDetails
     */
    latitude: number;
    /**
     * Longitude of a location.
     * @type {number}
     * @memberof LocationDetails
     */
    longitude: number;
}

/**
 * Check if a given object implements the LocationDetails interface.
 */
export function instanceOfLocationDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "shortName" in value;
    isInstance = isInstance && "matchQuality" in value;
    isInstance = isInstance && "parent" in value;
    isInstance = isInstance && "latitude" in value;
    isInstance = isInstance && "longitude" in value;

    return isInstance;
}

export function LocationDetailsFromJSON(json: any): LocationDetails {
    return LocationDetailsFromJSONTyped(json, false);
}

export function LocationDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shortName': json['shortName'],
        'matchQuality': json['matchQuality'],
        'parent': LocationFromJSON(json['parent']),
        'latitude': json['latitude'],
        'longitude': json['longitude'],
    };
}

export function LocationDetailsToJSON(value?: LocationDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shortName': value.shortName,
        'matchQuality': value.matchQuality,
        'parent': LocationToJSON(value.parent),
        'latitude': value.latitude,
        'longitude': value.longitude,
    };
}

