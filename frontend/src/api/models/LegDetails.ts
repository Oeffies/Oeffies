/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Swagger
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JourneyLocation } from './JourneyLocation';
import {
    JourneyLocationFromJSON,
    JourneyLocationFromJSONTyped,
    JourneyLocationToJSON,
} from './JourneyLocation';
import type { LegInfo } from './LegInfo';
import {
    LegInfoFromJSON,
    LegInfoFromJSONTyped,
    LegInfoToJSON,
} from './LegInfo';
import type { LegInterchange } from './LegInterchange';
import {
    LegInterchangeFromJSON,
    LegInterchangeFromJSONTyped,
    LegInterchangeToJSON,
} from './LegInterchange';
import type { LocationCoordinates } from './LocationCoordinates';
import {
    LocationCoordinatesFromJSON,
    LocationCoordinatesFromJSONTyped,
    LocationCoordinatesToJSON,
} from './LocationCoordinates';

/**
 * 
 * @export
 * @interface LegDetails
 */
export interface LegDetails {
    /**
     * Duration of leg in seconds.
     * @type {number}
     * @memberof LegDetails
     */
    duration: number;
    /**
     * Information like restrictions regarding this specifically dated leg (can be empty).
     * @type {Array<LegInfo>}
     * @memberof LegDetails
     */
    infos: Array<LegInfo>;
    /**
     * All stops that are part of this leg (origin to destination including intermediate stops).
     * @type {Array<JourneyLocation>}
     * @memberof LegDetails
     */
    stopSequence: Array<JourneyLocation>;
    /**
     * 
     * @type {LegInterchange}
     * @memberof LegDetails
     */
    interchange?: LegInterchange;
    /**
     * Coordinates that are describing the route this leg takes.
     * @type {Array<LocationCoordinates>}
     * @memberof LegDetails
     */
    coords: Array<LocationCoordinates>;
}

/**
 * Check if a given object implements the LegDetails interface.
 */
export function instanceOfLegDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "infos" in value;
    isInstance = isInstance && "stopSequence" in value;
    isInstance = isInstance && "coords" in value;

    return isInstance;
}

export function LegDetailsFromJSON(json: any): LegDetails {
    return LegDetailsFromJSONTyped(json, false);
}

export function LegDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LegDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'duration': json['duration'],
        'infos': ((json['infos'] as Array<any>).map(LegInfoFromJSON)),
        'stopSequence': ((json['stopSequence'] as Array<any>).map(JourneyLocationFromJSON)),
        'interchange': !exists(json, 'interchange') ? undefined : LegInterchangeFromJSON(json['interchange']),
        'coords': ((json['coords'] as Array<any>).map(LocationCoordinatesFromJSON)),
    };
}

export function LegDetailsToJSON(value?: LegDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'duration': value.duration,
        'infos': ((value.infos as Array<any>).map(LegInfoToJSON)),
        'stopSequence': ((value.stopSequence as Array<any>).map(JourneyLocationToJSON)),
        'interchange': LegInterchangeToJSON(value.interchange),
        'coords': ((value.coords as Array<any>).map(LocationCoordinatesToJSON)),
    };
}

